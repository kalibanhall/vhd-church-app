import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function migrateRoles() {
  try {
    console.log('üöÄ Migration des r√¥les utilisateurs...')

    // R√©cup√©rer tous les utilisateurs
    const users = await prisma.user.findMany()
    
    console.log(`üìä ${users.length} utilisateurs trouv√©s`)

    let updatedCount = 0

    for (const user of users) {
      let newRole = user.role

      // Mapper les anciens r√¥les vers les nouveaux
      switch (user.role) {
        case 'MEMBER':
          newRole = 'FIDELE'
          break
        case 'PASTOR':
          newRole = 'PASTEUR'
          break
        case 'DEACON':
          newRole = 'OUVRIER'
          break
        case 'ADMIN':
          newRole = 'ADMIN'
          break
        default:
          if (!['FIDELE', 'OUVRIER', 'PASTEUR', 'ADMIN'].includes(user.role)) {
            newRole = 'FIDELE' // Par d√©faut
          }
      }

      if (newRole !== user.role) {
        try {
          await prisma.user.update({
            where: { id: user.id },
            data: { role: newRole as any }
          })
          
          console.log(`‚úÖ ${user.firstName} ${user.lastName}: ${user.role} ‚Üí ${newRole}`)
          updatedCount++
        } catch (error) {
          console.error(`‚ùå Erreur mise √† jour ${user.firstName} ${user.lastName}:`, error)
        }
      }
    }

    console.log(`\nüéâ Migration termin√©e!`)
    console.log(`üìà ${updatedCount} utilisateurs mis √† jour`)
    console.log(`\nüìã Nouveaux r√¥les disponibles:`)
    console.log(`   ‚Ä¢ FIDELE (anciennement MEMBER)`)
    console.log(`   ‚Ä¢ OUVRIER (anciennement DEACON)`)
    console.log(`   ‚Ä¢ PASTEUR (anciennement PASTOR)`)
    console.log(`   ‚Ä¢ ADMIN (inchang√©)`)

    // Cr√©er un compte pasteur et ouvrier de test si pas encore existants
    const pastorExists = await prisma.user.findFirst({
      where: { role: 'PASTEUR' }
    })

    const ouvierExists = await prisma.user.findFirst({
      where: { role: 'OUVRIER' }
    })

    if (!pastorExists) {
      console.log('\nüë®‚Äçüôè Cr√©ation d\'un compte Pasteur de test...')
      await prisma.user.create({
        data: {
          firstName: 'Paul',
          lastName: 'Kabamba',
          email: 'pasteur@myChurch.app',
          passwordHash: '$2b$10$8K4qOjv5GKk4vK5QxT0k0eXz5h.FN4zT0Q6vK5QxT0k0eXz5h.FN4z', // password: pastor123
          role: 'PASTEUR',
          status: 'ACTIVE',
          membershipDate: new Date(),
          membershipNumber: 'P-2025-001',
          phone: '+33123456789'
        }
      })
      console.log('‚úÖ Compte Pasteur cr√©√©: pasteur@myChurch.app / pastor123')
    }

    if (!ouvierExists) {
      console.log('\nüë∑ Cr√©ation d\'un compte Ouvrier de test...')
      await prisma.user.create({
        data: {
          firstName: 'Marie',
          lastName: 'Durand',
          email: 'ouvrier@myChurch.app',
          passwordHash: '$2b$10$8K4qOjv5GKk4vK5QxT0k0eXz5h.FN4zT0Q6vK5QxT0k0eXz5h.FN4z', // password: ouvrier123
          role: 'OUVRIER',
          status: 'ACTIVE',
          membershipDate: new Date(),
          membershipNumber: 'O-2025-001',
          phone: '+33987654321'
        }
      })
      console.log('‚úÖ Compte Ouvrier cr√©√©: ouvrier@myChurch.app / ouvrier123')
    }

    console.log('\nüîê Permissions pour les pr√©dications:')
    console.log('   ‚Ä¢ PASTEUR: Cr√©er, modifier ses pr√©dications, supprimer ses pr√©dications')
    console.log('   ‚Ä¢ OUVRIER: Cr√©er, modifier ses pr√©dications, supprimer ses pr√©dications')
    console.log('   ‚Ä¢ ADMIN: Cr√©er, modifier toutes, supprimer toutes')
    console.log('   ‚Ä¢ FIDELE: Consulter seulement les pr√©dications publi√©es')

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error)
  } finally {
    await prisma.$disconnect()
  }
}

migrateRoles()