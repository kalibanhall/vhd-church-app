// Schema Prisma pour PRODUCTION (Vercel + Supabase PostgreSQL)
// Ce fichier sera utilisé automatiquement par Vercel

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle principal pour les utilisateurs/membres de l'église
model User {
  id                      String    @id @default(cuid())
  firstName               String    @map("first_name")
  lastName                String    @map("last_name")
  email                   String    @unique
  phone                   String?
  passwordHash            String    @map("password_hash")
  role                    String    @default("MEMBER") // ADMIN, PASTOR, MEMBER
  status                  String    @default("PENDING") // ACTIVE, PENDING, INACTIVE, BANNED
  profileImageUrl         String?   @map("profile_image_url")
  membershipNumber        String    @unique @map("membership_number")
  membershipDate          DateTime  @map("membership_date") @default(now())
  
  // Relations
  donations               Donation[]
  prayerRequests         Prayer[]
  testimonies            Testimony[]
  appointmentsCreated    Appointment[] @relation("UserAppointmentsCreated")
  appointmentsAttending  Appointment[] @relation("UserAppointmentsAttending") 
  preachingsCreated      Preaching[] @relation("UserPreachingsCreated")
  chatMessages           ChatMessage[]
  notifications          Notification[]
  auditLogs              AuditLog[]
  eventParticipations    EventParticipation[]
  
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  
  @@map("users")
}

// Modèle pour les dons/offrandes
model Donation {
  id                String          @id @default(cuid())
  userId            String          @map("user_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount            Float
  currency          String          @default("USD") // USD, EUR, CDF
  type              String          // TITHE, OFFERING, SPECIAL, MISSION
  description       String?
  method            String          // CASH, MOBILE_MONEY, BANK_TRANSFER, CARD
  reference         String?         // Référence transaction
  receiptUrl        String?         @map("receipt_url")
  status            String          @default("PENDING") // PENDING, CONFIRMED, CANCELLED
  confirmedBy       String?         @map("confirmed_by")
  confirmedAt       DateTime?       @map("confirmed_at")
  
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  
  @@map("donations")
}

// Modèle pour les prédications/sermons
model Preaching {
  id                String          @id @default(cuid())
  title             String
  description       String?
  content           String          // Contenu de la prédication
  scripture         String?         // Verset/passage biblique
  preacherId        String          @map("preacher_id")
  preacher          User            @relation("UserPreachingsCreated", fields: [preacherId], references: [id])
  category          String          @default("SERMON") // SERMON, TEACHING, PROPHECY, TESTIMONY
  tags              String?         // Tags séparés par virgules
  audioUrl          String?         @map("audio_url")
  videoUrl          String?         @map("video_url")
  thumbnailUrl      String?         @map("thumbnail_url")
  duration          Int?            // Durée en minutes
  viewCount         Int             @default(0) @map("view_count")
  likeCount         Int             @default(0) @map("like_count")
  status            String          @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  scheduledFor      DateTime?       @map("scheduled_for")
  publishedAt       DateTime?       @map("published_at")
  
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  
  @@map("preachings")
}

// Modèle pour les rendez-vous (counseling, réunions)
model Appointment {
  id                String          @id @default(cuid())
  title             String
  description       String?
  type              String          // COUNSELING, MEETING, PRAYER, VISIT
  status            String          @default("SCHEDULED") // SCHEDULED, CONFIRMED, CANCELLED, COMPLETED
  priority          String          @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  
  // Participants
  createdById       String          @map("created_by_id")
  createdBy         User            @relation("UserAppointmentsCreated", fields: [createdById], references: [id])
  attendeeId        String?         @map("attendee_id")
  attendee          User?           @relation("UserAppointmentsAttending", fields: [attendeeId], references: [id])
  
  // Timing
  startTime         DateTime        @map("start_time")
  endTime           DateTime        @map("end_time")
  duration          Int?            // Durée en minutes
  
  // Localisation et détails
  location          String?
  meetingLink       String?         @map("meeting_link")
  notes             String?
  reminderSent      Boolean         @default(false) @map("reminder_sent")
  reminderTime      DateTime?       @map("reminder_time")
  
  // Suivi
  followUpRequired  Boolean         @default(false) @map("follow_up_required")
  followUpNotes     String?         @map("follow_up_notes")
  completedAt       DateTime?       @map("completed_at")
  
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  
  @@map("appointments")
}

// Modèle pour les demandes de prière
model Prayer {
  id                String          @id @default(cuid())
  userId            String          @map("user_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  title             String
  description       String
  category          String          // HEALING, FAMILY, FINANCES, SPIRITUAL, OTHER
  priority          String          @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  status            String          @default("PENDING") // PENDING, APPROVED, REJECTED, ANSWERED
  isAnonymous       Boolean         @default(false) @map("is_anonymous")
  isPublic          Boolean         @default(false) @map("is_public")
  approvedBy        String?         @map("approved_by")
  approvedAt        DateTime?       @map("approved_at")
  answeredAt        DateTime?       @map("answered_at")
  answerDescription String?         @map("answer_description")
  prayerCount       Int             @default(0) @map("prayer_count")
  
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  
  @@map("prayers")
}

// Modèle pour les témoignages
model Testimony {
  id                String          @id @default(cuid())
  userId            String          @map("user_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  title             String
  content           String
  category          String          // HEALING, DELIVERANCE, PROVISION, SALVATION, OTHER
  isAnonymous       Boolean         @default(false) @map("is_anonymous")
  isPublic          Boolean         @default(false) @map("is_public")
  status            String          @default("PENDING") // PENDING, APPROVED, REJECTED
  approvedBy        String?         @map("approved_by")
  approvedAt        DateTime?       @map("approved_at")
  featuredAt        DateTime?       @map("featured_at")
  viewCount         Int             @default(0) @map("view_count")
  likeCount         Int             @default(0) @map("like_count")
  
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  
  @@map("testimonies")
}

// Modèle pour les événements de l'église
model Event {
  id                String                @id @default(cuid())
  title             String
  description       String?
  type              String                // SERVICE, CONFERENCE, RETREAT, OUTREACH, MEETING
  status            String                @default("SCHEDULED") // SCHEDULED, ONGOING, COMPLETED, CANCELLED
  location          String?
  venue             String?
  eventDate         DateTime              @map("event_date")
  startTime         String?               @map("start_time")
  endTime           String?               @map("end_time")
  maxParticipants   Int?                  @map("max_participants")
  currentParticipants Int               @default(0) @map("current_participants")
  isPublic          Boolean               @default(true) @map("is_public")
  requiresRegistration Boolean            @default(false) @map("requires_registration")
  registrationDeadline DateTime?          @map("registration_deadline")
  cost              Float?
  currency          String?               @default("USD")
  imageUrl          String?               @map("image_url")
  organizerId       String?               @map("organizer_id")
  tags              String?               // Tags séparés par virgules
  showOnHomepage    Boolean               @default(false) @map("show_on_homepage")
  
  // Relations
  participations    EventParticipation[]
  
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @updatedAt @map("updated_at")
  
  @@map("events")
}

// Modèle pour les participations aux événements
model EventParticipation {
  id                String          @id @default(cuid())
  eventId           String          @map("event_id")
  event             Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId            String          @map("user_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  status            String          @default("REGISTERED") // REGISTERED, CONFIRMED, ATTENDED, CANCELLED
  registeredAt      DateTime        @default(now()) @map("registered_at")
  attendedAt        DateTime?       @map("attended_at")
  notes             String?
  
  @@unique([eventId, userId])
  @@map("event_participations")
}

// Modèle pour le chat/messagerie
model ChatMessage {
  id                String          @id @default(cuid())
  senderId          String          @map("sender_id")
  sender            User            @relation(fields: [senderId], references: [id], onDelete: Cascade)
  receiverId        String?         @map("receiver_id") // null pour messages publics
  content           String
  type              String          @default("TEXT") // TEXT, IMAGE, FILE, AUDIO
  fileUrl           String?         @map("file_url")
  fileName          String?         @map("file_name")
  fileSize          Int?            @map("file_size")
  isPublic          Boolean         @default(false) @map("is_public")
  isEdited          Boolean         @default(false) @map("is_edited")
  editedAt          DateTime?       @map("edited_at")
  isDeleted         Boolean         @default(false) @map("is_deleted")
  deletedAt         DateTime?       @map("deleted_at")
  readAt            DateTime?       @map("read_at")
  
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  
  @@map("chat_messages")
}

// Modèle pour les notifications
model Notification {
  id                String          @id @default(cuid())
  userId            String          @map("user_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  title             String
  message           String
  type              String          // INFO, SUCCESS, WARNING, ERROR, REMINDER
  category          String?         // PRAYER, DONATION, EVENT, APPOINTMENT, SYSTEM
  relatedId         String?         @map("related_id") // ID de l'objet lié
  relatedType       String?         @map("related_type") // prayer, donation, event, etc.
  isRead            Boolean         @default(false) @map("is_read")
  readAt            DateTime?       @map("read_at")
  actionUrl         String?         @map("action_url")
  expiresAt         DateTime?       @map("expires_at")
  
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  
  @@map("notifications")
}

// Modèle pour l'audit et les logs
model AuditLog {
  id                String          @id @default(cuid())
  userId            String?         @map("user_id")
  user              User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  action            String          // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, etc.
  entity            String          // user, donation, prayer, etc.
  entityId          String          @map("entity_id")
  oldValues         String?         @map("old_values") // JSON des anciennes valeurs
  newValues         String?         @map("new_values") // JSON des nouvelles valeurs
  ipAddress         String?         @map("ip_address")
  userAgent         String?         @map("user_agent")
  timestamp         DateTime        @default(now())
  
  @@map("audit_logs")
}

// Modèle pour les paramètres système
model SystemSetting {
  id                String          @id @default(cuid())
  key               String          @unique // church_name, contact_email, etc.
  value             String
  type              String          @default("STRING") // STRING, NUMBER, BOOLEAN, JSON
  description       String?
  category          String?         // GENERAL, SECURITY, NOTIFICATIONS, etc.
  isPublic          Boolean         @default(false) @map("is_public")
  
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  
  @@map("system_settings")
}